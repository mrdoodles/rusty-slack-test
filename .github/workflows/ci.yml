name: CI

on: pull_request

jobs:
  build-all:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Semantic Releaser
        uses: jossef/action-semantic-releaser@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # # - uses: GoogleCloudPlatform/release-please-action@v2
      # #   id: version
      # #   with:
      # #     release-type: rust

      # - name: Determine version and create changelog
      #   id: bumper
      #   uses: tomerfi/version-bumper-action@1.0.1
      #   with:
      #     changelog: true

      # - name: Update Cargo Version
      #   uses: ciiiii/toml-editor@1.0.0
      #   with:
      #     file: "file/path/xx.toml"
      #     key: "package.version"
      #     value: "${{ steps.bumper.outputs.new_version }}"

      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      # - uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release

      # - name: Lint builder Dockerfile
      #   uses: hadolint/hadolint-action@v1.6.0
      #   with:
      #     dockerfile: Dockerfile.builder

      # - name: Build an image from builder Dockerfile
      #   run: |
      #     docker build -t builder -f Dockerfile.builder .

      # - name: Trivy scan builder Dockerfile
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "builder"
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "MEDIUM,CRITICAL,HIGH"

      # - name: Lint main Dockerfile
      #   uses: hadolint/hadolint-action@v1.6.0
      #   with:
      #     dockerfile: Dockerfile

      # - name: Build an image from main Dockerfile
      #   run: |
      #     docker build -t rusty .

      # - name: Trivy scan main Dockerfile
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: "rusty"
      #     format: "table"
      #     exit-code: "1"
      #     ignore-unfixed: true
      #     vuln-type: "os,library"
      #     severity: "MEDIUM,CRITICAL,HIGH"

      # # - name: Commit changes
      # #   run: |
      # #     echo "TODO: Write Commit changes step"

      # - name: push a random file
      #   run: |
      #     pwd
      #     ls -a
      #     git init
      #     git remote add origin "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
      #     git config --global user.email "oberibot@oberiworks.com"
      #     git config --global user.name "Oberi Bot"
      #     git fetch
      #     git checkout main
      #     git branch --set-upstream-to=origin/main
      #     git pull
      #     ls -a
      #     echo $RANDOM >> random.txt
      #     ls -a
      #     git add .
      #     git commit -m"Random number file"
      #     git push

      # # - name: Tag release
      # #   run: |
      # #     echo "TODO: Write Tag release step"
      # #     docker tag rusty docker.io/mrdoodles/rusty-slack:${{ steps.bumper.outputs.new_version }}

      # # - name: Update major tag
      # #   run: |
      # #     docker tag rusty docker.io/mrdoodles/rusty-slack:$( echo ${{ steps.bumper.outputs.new_version }} | | awk -F . '{print $1}' )

      # # - name: Update manor tag
      # #   run: |
      # #     docker tag rusty docker.io/mrdoodles/rusty-slack:$( echo ${{ steps.bumper.outputs.new_version }} | | awk -F . '{print $1"."$2"}' )

      # - name: Open Issue
      #   if: failure()
      #   run: |
      #     curl --request POST \
      #     --url https://api.github.com/repos/${{ github.repository }}/issues \
      #     --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
      #     --header 'content-type: application/json' \
      #     --data '{
      #       "title": "Workflow failure for commit: ${{ github.sha }}",
      #       "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
      #       "assignees": ["${{ github.event.pull_request.user.login }}"]
      #       }' \
      #     --fail
